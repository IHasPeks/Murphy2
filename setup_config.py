"""
Interactive setup script to configure MurphyAI Bot credentials
This makes it easy to set up the bot without editing code
"""

import os
import sys
import getpass

def get_input(prompt, default="", hide=False):
    """Get input from user with optional default value"""
    if default:
        prompt = f"{prompt} [{default}]: "
    else:
        prompt = f"{prompt}: "

    if hide:
        value = getpass.getpass(prompt)
    else:
        value = input(prompt)

    return value.strip() or default

def validate_oauth_token(token):
    """Validate OAuth token format"""
    if not token.startswith("oauth:"):
        return "oauth:" + token
    return token

def main():
    print("=== MurphyAI Bot Configuration Setup ===")
    print("\nThis wizard will help you configure your bot credentials.")
    print("You'll need:")
    print("  1. A Twitch Bot Account")
    print("  2. Twitch OAuth Token (from https://twitchapps.com/tmi/)")
    print("  3. Twitch Client ID (from https://dev.twitch.tv/console/apps)")
    print("  4. OpenAI API Key (from https://platform.openai.com/api-keys)")
    print("\n" + "="*50 + "\n")

    # Get current values if config.py exists
    current_values = {}
    try:
        import config
        current_values = {
            'bot_nick': config.BOT_NICK if config.BOT_NICK != "YourBotName" else "",
            'channels': ",".join(config.TWITCH_INITIAL_CHANNELS) if config.TWITCH_INITIAL_CHANNELS != ["channel1", "channel2"] else "",
        }
    except:
        pass

    # Collect configuration
    print("STEP 1: Twitch Bot Configuration")
    print("-" * 30)

    bot_nick = get_input("Bot's Twitch username", current_values.get('bot_nick', ''))
    if not bot_nick:
        print("❌ Bot username is required!")
        sys.exit(1)

    print("\nGet your OAuth token from: https://twitchapps.com/tmi/")
    print("(The token should start with 'oauth:')")
    oauth_token = get_input("OAuth token", hide=True)
    if not oauth_token:
        print("❌ OAuth token is required!")
        sys.exit(1)
    oauth_token = validate_oauth_token(oauth_token)

    print("\nGet your Client ID from: https://dev.twitch.tv/console/apps")
    client_id = get_input("Twitch Client ID")
    if not client_id:
        print("❌ Client ID is required!")
        sys.exit(1)

    print("\nEnter the channels the bot should join (comma-separated)")
    channels_input = get_input("Channels", current_values.get('channels', ''))
    if not channels_input:
        print("❌ At least one channel is required!")
        sys.exit(1)

    channels = [ch.strip() for ch in channels_input.split(',')]

    print("\n\nSTEP 2: OpenAI Configuration")
    print("-" * 30)
    print("Get your API key from: https://platform.openai.com/api-keys")
    openai_key = get_input("OpenAI API Key", hide=True)
    if not openai_key:
        print("⚠️  Warning: No OpenAI key provided. AI commands won't work!")
        response = input("Continue without AI features? (y/n): ")
        if response.lower() != 'y':
            sys.exit(1)
        openai_key = "sk-your_openai_api_key_here"

    print("\n\nSTEP 3: Optional Configuration")
    print("-" * 30)

    # Command prefix
    prefix = get_input("Command prefix", "?")
    mod_prefix = get_input("Mod command prefix", "\\\\")

    # Stream schedule
    print("\nStream Schedule (24-hour format, e.g., 18:00)")
    print("Leave blank for days without streams")
    schedule = {}
    for day in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
        time = get_input(f"  {day.capitalize()}")
        schedule[day] = time

    # Generate config.py content
    config_content = f'''"""
Configuration file with hardcoded values for standalone executable
WARNING: This file contains sensitive credentials. Keep it secure!
Auto-generated by setup_config.py
"""

# Twitch Bot Configuration
BOT_NICK = "{bot_nick}"
TWITCH_TOKEN = "{oauth_token}"
TWITCH_CLIENT_ID = "{client_id}"
TWITCH_INITIAL_CHANNELS = {channels}

# OpenAI Configuration
OPENAI_API_KEY = "{openai_key}"

# Command Prefixes
TWITCH_PREFIX = "{prefix}"
MOD_PREFIX = "{mod_prefix}"

# Stream Schedule (24-hour format HH:MM) - Empty string for no stream
STREAM_SCHEDULE = {{
    'monday': '{schedule.get('monday', '')}',
    'tuesday': '{schedule.get('tuesday', '')}',
    'wednesday': '{schedule.get('wednesday', '')}',
    'thursday': '{schedule.get('thursday', '')}',
    'friday': '{schedule.get('friday', '')}',
    'saturday': '{schedule.get('saturday', '')}',
    'sunday': '{schedule.get('sunday', '')}'
}}

# Logging Configuration
LOG_LEVEL = "INFO"
LOG_FILE = "murphyai.log"

# Queue Configuration
DEFAULT_QUEUE_USER = ""
DEFAULT_TEAM_SIZE = 5
DEFAULT_QUEUE_SIZE = 5

# AI Configuration
OPENAI_MODEL = "gpt-3.5-turbo"

# Rate Limiting
MAX_AI_REQUESTS_PER_MINUTE = 20
MAX_AI_REQUESTS_PER_USER_MINUTE = 3

# Development/Production Mode
ENVIRONMENT = "production"
'''

    # Backup existing config.py if it exists
    if os.path.exists('config.py'):
        import shutil
        shutil.copy('config.py', 'config.py.backup')
        print("\n✅ Backed up existing config.py to config.py.backup")

    # Write new config
    with open('config.py', 'w') as f:
        f.write(config_content)

    print("\n✅ Configuration saved to config.py")
    print("\n" + "="*50)
    print("\nConfiguration complete! Next steps:")
    print("1. Run 'python build_executable.py' to create the executable")
    print("2. The packaged bot will be in 'MurphyAI_Bot_Package.zip'")
    print("3. Extract the zip and run 'Start_MurphyAI_Bot.bat'")

    # Ask if they want to build now
    response = input("\nDo you want to build the executable now? (y/n): ")
    if response.lower() == 'y':
        print("\nStarting build process...")
        os.system(f"{sys.executable} build_executable.py")

if __name__ == "__main__":
    main()
